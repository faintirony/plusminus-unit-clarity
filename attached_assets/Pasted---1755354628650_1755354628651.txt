–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
- –ò–∫–æ–Ω–∫—É –∫–∞—Ä–∞–Ω–¥–∞—à–∞ —Ä—è–¥–æ–º —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é (–∫–∞–∫ –≤ –¢-–ë–∞–Ω–∫–µ)
- –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π (–∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter/Return –∏ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –≥–∞–ª–æ—á–∫—É
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

–í–æ—Ç –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

CSS (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ styles.css)
css

–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å */
.cost-price-column {
    position: relative;
}

.metric-value.editable {
    cursor: pointer;
    padding: 4px 6px;
    border-radius: 4px;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 4px;
    border: 1px solid transparent;
    position: relative;
}

.metric-value.editable:hover {
    background: #f7fafc;
    border-color: #e2e8f0;
}

.edit-icon {
    font-size: 10px;
    color: #a0aec0;
    opacity: 0;
    transition: opacity 0.2s;
}

.metric-value.editable:hover .edit-icon {
    opacity: 1;
}

/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
.metric-value.editing {
    background: #fef5e7;
    border: 2px solid #f6ad55;
    box-shadow: 0 0 0 3px rgba(246, 173, 85, 0.1);
    padding: 2px 4px;
}

.cost-price-input {
    width: 65px;
    border: none;
    outline: none;
    background: transparent;
    font-size: 14px;
    font-weight: 700;
    color: #2d3748;
    text-align: center;
    padding: 0;
}

.edit-actions {
    display: flex;
    gap: 4px;
    margin-left: 6px;
}

.edit-action-btn {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 12px;
    padding: 2px 4px;
    border-radius: 3px;
    transition: all 0.2s;
    line-height: 1;
    width: 18px;
    height: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.edit-action-btn.save {
    color: #38a169;
    background: #f0fff4;
}

.edit-action-btn.cancel {
    color: #e53e3e;
    background: #fff5f5;
}

.edit-action-btn:hover.save {
    background: #c6f6d5;
}

.edit-action-btn:hover.cancel {
    background: #fed7d7;
}

/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */
.update-notification {
    position: fixed;
    top: 80px;
    right: 20px;
    background: #38a169;
    color: white;
    padding: 12px 16px;
    border-radius: 8px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    font-size: 14px;
    font-weight: 500;
    z-index: 1000;
    transform: translateX(400px);
    opacity: 0;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    max-width: 320px;
}

.update-notification.show {
    transform: translateX(0);
    opacity: 1;
}

.update-notification.error {
    background: #e53e3e;
}

.notification-icon {
    font-size: 16px;
    flex-shrink: 0;
}

.notification-message {
    flex: 1;
}

.notification-close {
    background: none;
    border: none;
    color: currentColor;
    cursor: pointer;
    font-size: 18px;
    padding: 0;
    margin-left: 8px;
    opacity: 0.8;
    transition: opacity 0.2s;
}

.notification-close:hover {
    opacity: 1;
}
JavaScript (–ø–æ–ª–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
javascript

–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
// –î–æ–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å ProductManager

// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ renderProducts - —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
renderProducts() {
    const container = document.getElementById('productsList');

    if (this.filteredProducts.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
            </div>
        `;
        return;
    }

    container.innerHTML = this.filteredProducts.map(product => `
        <div class="product-card" data-product-id="${product.id}">
            <div class="card-content">
                <!-- –ò–∫–æ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞ -->
                <div class="product-image">
                    ${this.getProductIcon(product.category)}
                </div>

                <!-- –ù–∞–∑–≤–∞–Ω–∏–µ + –ø–ª–æ—â–∞–¥–∫–∞ -->
                <div class="product-info">
                    <div class="product-title" title="${product.name}">
                        ${product.name}
                    </div>
                    <div class="product-marketplace">
                        ${this.getMarketplaceName(product.marketplace)}
                    </div>
                </div>

                <!-- –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ -->
                <div class="metric-column price">
                    <div class="metric-value">${this.formatCurrency(product.salePrice)}</div>
                    <div class="metric-label">–¶–µ–Ω–∞</div>
                </div>

                <!-- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º -->
                <div class="metric-column cost-price-column">
                    <div class="metric-value editable" 
                         id="cost-${product.id}"
                         onclick="productManager.startEditCostPrice('${product.id}')">
                        <span class="cost-value">${this.formatCurrency(product.costPrice)}</span>
                        <span class="edit-icon">‚úèÔ∏è</span>
                    </div>
                    <div class="metric-label">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</div>
                </div>

                <!-- –ú–∞—Ä–∂–∞ –≤ —Ä—É–±–ª—è—Ö -->
                <div class="metric-column margin-rub">
                    <div class="metric-value ${product.marginRub >= 0 ? 'positive' : 'negative'}" id="margin-rub-${product.id}">
                        ${this.formatCurrency(product.marginRub)}
                    </div>
                    <div class="metric-label">–ú–∞—Ä–∂–∞ ‚ÇΩ</div>
                </div>

                <!-- –ú–∞—Ä–∂–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö -->
                <div class="metric-column margin-percent">
                    <div class="metric-value ${product.marginPercent >= 0 ? 'positive' : 'negative'}" id="margin-percent-${product.id}">
                        ${product.marginPercent.toFixed(1)}%
                    </div>
                    <div class="metric-label">–ú–∞—Ä–∂–∞ %</div>
                </div>

                <!-- –°—Ç–∞—Ç—É—Å –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ -->
                <div class="profitability-column">
                    <span class="profitability-badge ${product.isProfitable ? 'profitable' : 'unprofitable'}" id="status-${product.id}">
                        ${product.isProfitable ? '–ü–†–ò–ë–´–õ–¨–ù–´–ô' : '–£–ë–´–¢–û–ß–ù–´–ô'}
                    </span>
                </div>

                <!-- –¢–∞–±—ã -->
                <div class="product-tabs">
                    <button class="tab-button" onclick="productManager.toggleTab('${product.id}', 'finances')">
                        <span class="tab-icon">üí∞</span>
                        <span class="tab-text">–§–∏–Ω–∞–Ω—Å—ã</span>
                        <div class="tooltip">–§–∏–Ω–∞–Ω—Å—ã</div>
                    </button>
                    <button class="tab-button" onclick="productManager.toggleTab('${product.id}', 'expenses')">
                        <span class="tab-icon">üìä</span>
                        <span class="tab-text">–†–∞—Å—Ö–æ–¥—ã</span>
                        <div class="tooltip">–†–∞—Å—Ö–æ–¥—ã</div>
                    </button>
                    <button class="tab-button" onclick="productManager.toggleTab('${product.id}', 'product')">
                        <span class="tab-icon">üì¶</span>
                        <span class="tab-text">–û —Ç–æ–≤–∞—Ä–µ</span>
                        <div class="tooltip">–û —Ç–æ–≤–∞—Ä–µ</div>
                    </button>
                </div>
            </div>

            ${this.renderTabsContent(product)}
        </div>
    `).join('');
}

// –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
startEditCostPrice(productId) {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (this.editingProduct && this.editingProduct !== productId) {
        this.cancelEditCostPrice(this.editingProduct);
    }

    const product = this.products.find(p => p.id === productId);
    if (!product) return;

    const costElement = document.getElementById(`cost-${productId}`);
    if (!costElement) return;

    this.editingProduct = productId;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    costElement.innerHTML = `
        <input type="number" 
               class="cost-price-input" 
               id="cost-input-${productId}"
               value="${product.costPrice}"
               min="0"
               step="1">
        <div class="edit-actions">
            <button class="edit-action-btn save" 
                    onclick="productManager.saveCostPrice('${productId}')" 
                    title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
                ‚úì
            </button>
            <button class="edit-action-btn cancel" 
                    onclick="productManager.cancelEditCostPrice('${productId}')" 
                    title="–û—Ç–º–µ–Ω–∏—Ç—å">
                ‚úï
            </button>
        </div>
    `;

    costElement.classList.add('editing');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const input = document.getElementById(`cost-input-${productId}`);
    input.focus();
    input.select();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            this.saveCostPrice(productId);
        } else if (e.key === 'Escape') {
            e.preventDefault();
            this.cancelEditCostPrice(productId);
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫)
    input.addEventListener('blur', (e) => {
        setTimeout(() => {
            if (this.editingProduct === productId) {
                this.saveCostPrice(productId);
            }
        }, 100);
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
saveCostPrice(productId) {
    const input = document.getElementById(`cost-input-${productId}`);
    if (!input) return;

    const newCostPrice = parseFloat(input.value);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (isNaN(newCostPrice) || newCostPrice < 0) {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å', 'error');
        return;
    }

    const product = this.products.find(p => p.id === productId);
    if (!product) return;

    const oldCostPrice = product.costPrice;

    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (oldCostPrice === newCostPrice) {
        this.cancelEditCostPrice(productId);
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    product.costPrice = newCostPrice;
    this.recalculateProductMetrics(product);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.updateProductDisplay(productId);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.editingProduct = null;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification(
        `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${this.formatCurrency(oldCostPrice)} ‚Üí ${this.formatCurrency(newCostPrice)}`
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateStats();
    this.applyFilters(); // –ü–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
cancelEditCostPrice(productId) {
    const product = this.products.find(p => p.id === productId);
    if (!product) return;

    const costElement = document.getElementById(`cost-${productId}`);
    if (!costElement) return;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    costElement.innerHTML = `
        <span class="cost-value">${this.formatCurrency(product.costPrice)}</span>
        <span class="edit-icon">‚úèÔ∏è</span>
    `;

    costElement.classList.remove('editing');
    this.editingProduct = null;
}

// –ü–µ—Ä–µ—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
recalculateProductMetrics(product) {
    // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ä–∂—É
    const totalCosts = product.costPrice + product.totalExpenses;
    product.marginRub = product.salePrice - totalCosts;
    product.marginPercent = product.salePrice > 0 ? (product.marginRub / product.salePrice) * 100 : 0;
    product.isProfitable = product.marginRub > 0;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
updateProductDisplay(productId) {
    const product = this.products.find(p => p.id === productId);
    if (!product) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
    const costElement = document.getElementById(`cost-${productId}`


